def Rdome(n, cl):
    num = []
    for i in range(cl):
        binary = bin(i).replace("0b", "")
        while len(binary) < n:
            binary = '0' + binary
        num.append(list(binary)[::-1])

    r = []
    for i in range(n):
        ren = []
        for j in range(cl):
            if num[j][i] == '1':
                ren.append(j)
        r.append(ren)

    return r

def even_parity(p, m):
    even = 0
    for i in range(len(p)):
        if m[p[i] - 1] == '1':
            even += 1
    if even % 2 == 0:
        return '0'
    else:
        return '1'

message = input("Enter Received Hamming Code: ")
power = 0

for i in range(len(message)):
    if 2 ** power <= i:
        power += 1

message_len = len(message)
p = Rdome(power, message_len)

p_bits = []
for i in range(power):
    p_bits.append(even_parity(p[i], message))

p_no = 0
for i in range(power):
    p_no += int(p_bits[i]) * (2 ** i)

print("Error Bit at Position:", p_no)

if message[p_no - 1] == '1':
    message = message[:p_no - 1] + '0' + message[p_no:]
else:
    message = message[:p_no - 1] + '1' + message[p_no:]

print("Corrected Received Hamming Code:", message)
